out$L <- as.numeric(out$L)
out$cum_500 <- with(out,W-L)
al_c_game_500 <- ungroup(out) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, cum_500)
al_c_game_500$Date <- as.Date(al_c_game_500$Date)
View(al_c_game_500)
ggplot(al_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
#scale_colour_manual(values = team_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL West Race through August 2016",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wild_card_race <- c("BOS","BAL","SEA","DET","KCR","HOU","NYY")
al_wd_c_game_500 <- al_c_game_500 %>% filter(Tm %in% wild_card_race)
wild_card_colors <- c("SEA" = "#01487E","HOU" = "#F7742C","BOS" = "#FF0000",'BAL' = "orange","DET" = "#000080","KCR" = "#4169E1", "NYY" = "#0000FF")
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wc_overall <- dates2 %>% group_by(y,m,d) %>% do(date_scrape(.$y, .$m, .$d, 8))
al_standings_2016 <- ungroup(wc_overall) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, GB)
al_standings_2016$GB <- as.numeric(al_standings_2016$GB)
al_standings_2016$Date <- as.Date(al_standings_2016$Date)
al_standings_2016$Tm <- as.factor(al_standings_2016$Tm)
al_standings_2016$GB <- ifelse(is.na(al_standings_2016$GB), 0, al_standings_2016$GB)
al_wd_c_GB <- al_standings_2016 %>% filter(Tm %in% wild_card_race)
ggplot(al_wd_c_GB, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-27", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through August 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
al_c_game_500 %>% filter(Date > as.date("2016-07-01"))
al_c_game_500 %>% filter(Date > as.Date("2016-07-01"))
al_wd_snapshot <- al_c_game_500 %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_d_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
ggplot(al_wd_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wild_card_colors
View(al_wd_snapshot)
unique(al_wd_snapshot)
unique(al_wd_snapshot$Tm)
al_wd_snapshot <- al_wd_c_game_500 %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
al_wd_c_GB %>% filter(Date > as.Date("2016-07-01"))
al_wd_GB_snapshot <- al_wd_c_GB %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_GB_snapshot, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-27", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through August 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
View(al_wd_c_game_500)
library(XML)
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
date_scrape <- function(y,m,d,div) {
url <- paste0("http://www.baseball-reference.com/games/standings.cgi?year=",y,"&month=",m, "&day=",d,"&submit=Submit+Date")
d <- readHTMLTable(url, stringsAsFactors = FALSE)
d <- as.data.frame(d[div])
d
}
year <- 2016
month <- 8
day <- 28
date <- paste0(year,"/",month,"/",day)
overall_standings <- date_scrape(year,month,day,div)
date <- paste0(year,"/",month,"/",day)
# create a complete sequence of dates you want to scrape data for
dates <- as.data.frame(seq(as.Date("2016/04/03"), as.Date(date), by = "weeks"))
names(dates) <- "dates"
# split the dates so that there are three separate inputs to feed the function
dates <- colsplit(dates$dates, "-", c("y", "m", "d"))
dates2 <- as.data.frame(seq(as.Date("2016/04/03"), as.Date(date), by = "days"))
names(dates2) <- "dates"
dates2 <- colsplit(dates2$dates, "-",c("y","m","d"))
al_div <- 8
out <- dates %>% group_by(y,m,d) %>% do(date_scrape(.$y, .$m, .$d, al_div))
out$W <- as.numeric(out$W)
out$L <- as.numeric(out$L)
out$cum_500 <- with(out,W-L)
al_c_game_500 <- ungroup(out) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, cum_500)
al_c_game_500$Date <- as.Date(al_c_game_500$Date)
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wild_card_race <- c("BOS","BAL","SEA","DET","KCR","HOU","NYY")
al_wd_c_game_500 <- al_c_game_500 %>% filter(Tm %in% wild_card_race)
#FFA500
wild_card_colors <- c("SEA" = "#01487E","HOU" = "#F7742C","BOS" = "#FF0000",'BAL' = "orange","DET" = "#000080","KCR" = "#4169E1", "NYY" = "#0000FF")
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
al_wd_snapshot <- al_wd_c_game_500 %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-21", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-28", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
ggplot(al_wd_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-28", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wc_overall <- dates2 %>% group_by(y,m,d) %>% do(date_scrape(.$y, .$m, .$d, 8))
al_standings_2016 <- ungroup(wc_overall) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, GB)
al_standings_2016$GB <- as.numeric(al_standings_2016$GB)
al_standings_2016$Date <- as.Date(al_standings_2016$Date)
al_standings_2016$Tm <- as.factor(al_standings_2016$Tm)
al_standings_2016$GB <- ifelse(is.na(al_standings_2016$GB), 0, al_standings_2016$GB)
al_wd_c_GB <- al_standings_2016 %>% filter(Tm %in% wild_card_race)
ggplot(al_wd_c_GB, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-27", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through August 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
ggplot(al_wd_c_GB, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-28", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through August 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
al_wd_GB_snapshot <- al_wd_c_GB %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_GB_snapshot, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-08-28", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through August 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
library(XML)
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
date_scrape <- function(y,m,d,div) {
url <- paste0("http://www.baseball-reference.com/games/standings.cgi?year=",y,"&month=",m, "&day=",d,"&submit=Submit+Date")
d <- readHTMLTable(url, stringsAsFactors = FALSE)
d <- as.data.frame(d[div])
d
}
year <- 2016
month <- 9
day <- 25
date <- paste0(year,"/",month,"/",day)
dates <- as.data.frame(seq(as.Date("2016/04/03"), as.Date(date), by = "weeks"))
names(dates) <- "dates"
dates <- colsplit(dates$dates, "-", c("y", "m", "d"))
dates2 <- as.data.frame(seq(as.Date("2016/04/03"), as.Date(date), by = "days"))
names(dates2) <- "dates"
dates2 <- colsplit(dates2$dates, "-",c("y","m","d"))
al_div <- 8
out <- dates %>% group_by(y,m,d) %>% do(date_scrape(.$y, .$m, .$d, al_div))
out$W <- as.numeric(out$W)
out$L <- as.numeric(out$L)
out$cum_500 <- with(out,W-L)
al_c_game_500 <- ungroup(out) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, cum_500)
al_c_game_500$Date <- as.Date(al_c_game_500$Date)
wild_card_race <- c("KCR","BAL","SEA","DET","TOR","HOU","NYY")
al_wd_c_game_500 <- al_c_game_500 %>% filter(Tm %in% wild_card_race)
#FFA500
wild_card_colors <- c("SEA" = "#01487E","HOU" = "#F7742C","KCR" = "#FF0000",'BAL' = "orange","DET" = "#000080","TOR" = "#4169E1", "NYY" = "#0000FF")
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-09-18", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
ggplot(al_wd_c_game_500, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-09-25", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
al_wd_snapshot <- al_wd_c_game_500 %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_snapshot, aes(Date, cum_500, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
geom_hline(yintercept = 0) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-09-25", as.character(cum_500),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race",y="Cumulative games over .500") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 30, face = "bold", vjust = 1))
wc_overall <- dates2 %>% group_by(y,m,d) %>% do(date_scrape(.$y, .$m, .$d, 8))
al_standings_2016 <- ungroup(wc_overall) %>% mutate(Date = paste0(y, sep = "-", m, sep = "-", d)) %>% select(Date, Tm, GB)
al_standings_2016$GB <- as.numeric(al_standings_2016$GB)
al_standings_2016$Date <- as.Date(al_standings_2016$Date)
al_standings_2016$Tm <- as.factor(al_standings_2016$Tm)
al_standings_2016$GB <- ifelse(is.na(al_standings_2016$GB), 0, al_standings_2016$GB)
al_wd_c_GB <- al_standings_2016 %>% filter(Tm %in% wild_card_race)
ggplot(al_wd_c_GB, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-09-25", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through September 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 26, face = "bold", vjust = 1))
al_wd_GB_snapshot <- al_wd_c_GB %>% filter(Date > as.Date("2016-07-01"))
ggplot(al_wd_GB_snapshot, aes(Date, GB, colour = Tm)) +
geom_line(size = 1.25, alpha = .75) +
scale_colour_manual(values = wild_card_colors, name = "Team") +
scale_y_reverse(breaks = 0:25) +
scale_x_date() +
geom_text(aes(label=ifelse(Date == "2016-09-25", as.character(GB),'')),hjust=-.5, size = 4, show.legend = FALSE) +
labs(title = "AL Wild Card race through September 2016") +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 12)) +
theme(axis.text = element_text(size = 13, face = "bold"), axis.title = element_text(size = 16, color = "grey50", face = "bold"), plot.title = element_text(size = 26, face = "bold", vjust = 1))
insatll.packages("multicore")
install.packages("multicore")
library(installr)
install.packages("installr")
?anova
getOption("na.action")
install.packages(baseballr)
install.packages("baseballr")
version
version
install.packages("baseballr")
library(devtools)
install.package("devtools")
install.packages("devtools")
library(devtools)
install_github("BillPetti/baseballr")
library(baseballr)
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
install.packages("dplyr")
install.packages("dplyr")
update.packages()
update.packages(ask=FALSE)
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
library(plyr)
library(plyr)
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
install.packages("magrittr")
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
library(magrittr)
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
library(baseballr)
ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
baseballr::ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
baseballr::ncaa_scrape(736, 2013, "batting") %>% select(year:OBPct)
ncaa_scrape(736,2013,"batting")
?ncaa_scrape
install.packages("nbaShotCharts")
?gbm
?train
library(caret)
library(gbm)
?gbm
setwd("/Users/meyappans/Desktop/CFB_Bowl/data")
# Non-Factor, Provides Win % Confidence
ind_game_stats <- readRDS(file="Ind_game_data.RDS")
ind_game_stats$away_team <- NULL
ind_game_stats$home_team <- NULL
## Drop scores, as they are too influential in determing who wins
## If you don't drop this, model picks whoever scores more over the course of the
## season. This isn't neccessarily who is going to win always.
ind_game_stats$away_team_score <- NULL
ind_game_stats$home_team_score <- NULL
# Factor, Provides Win (Yes or No)
ind_game_stats_fac <- ind_game_stats
ind_game_stats_fac$home_win <- as.factor(ind_game_stats_fac$home_win)
## Load bowl_game data
bowl_game_stats <- readRDS(file="bowl_games.RDS")
sapply(bowl_game_stats,class)
gbm <- bowl_game_stats
### Create SVM
library("e1071")
bowl_model <- svm(home_win ~ ., data=ind_game_stats)
summary(bowl_model)
colnames(ind_game_stats)
### RF
library(randomForest)
fit <- randomForest(home_win ~ ., ind_game_stats,ntree=500,na.action = na.exclude)
fit_fac <- randomForest(home_win ~ ., ind_game_stats_fac,ntree=500,na.action = na.exclude)
summary(fit)
summary(fit_fac)
#Predict Output
bowl_game_stats$home_win_pct <- as.vector(predict(fit,bowl_game_stats))
bowl_game_stats$home_win <- as.vector.factor(predict(fit_fac,bowl_game_stats))
bowl_game_stats$conf <- ifelse(bowl_game_stats$home_win == 1, bowl_game_stats$home_win_pct, 1-bowl_game_stats$home_win_pct)
### GBM
library(caret)
library(gbm)
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
gbm_fit_fac <- train(home_win ~ ., data = ind_game_stats_fac, method = "gbm", trControl = fitControl,verbose = FALSE,na.action = na.exclude)
predictions <- predict(gbm_fit_fac,bowl_game_stats,type= "prob")
gbm <- cbind(gbm,predictions)
gbm$gbm_home_win <- ifelse(gbm$`1`>gbm$`0`,1,0)
gbm$gbm_home_win_pct <- ifelse(gbm$gbm_home_win == 1,gbm$`1`,gbm$`0`)
bowl_game_stats <- cbind(bowl_game_stats,gbm$gbm_home_win,gbm$gbm_home_win_pct)
colnames(bowl_game_stats)[32:33] <- c("gbm_home_win","gbm_home_win_pct")
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,home_win_pct,gbm_home_win,gbm_home_win_pct)
#ind_game_stats$home_win <- as.factor(ind_game_stats$home_win)
#bowl_games$away_team <- NULL
#bowl_games$home_team <- NULL
View(gbm)
setwd("/Users/meyappans/Desktop/CFB_Bowl/data")
# Non-Factor, Provides Win % Confidence
ind_game_stats <- readRDS(file="Ind_game_data.RDS")
ind_game_stats$away_team <- NULL
ind_game_stats$home_team <- NULL
## Drop scores, as they are too influential in determing who wins
## If you don't drop this, model picks whoever scores more over the course of the
## season. This isn't neccessarily who is going to win always.
ind_game_stats$away_team_score <- NULL
ind_game_stats$home_team_score <- NULL
# Factor, Provides Win (Yes or No)
ind_game_stats_fac <- ind_game_stats
ind_game_stats_fac$home_win <- as.factor(ind_game_stats_fac$home_win)
## Load bowl_game data
bowl_game_stats <- readRDS(file="bowl_games.RDS")
sapply(bowl_game_stats,class)
gbm <- bowl_game_stats
### Create SVM
library("e1071")
bowl_model <- svm(home_win ~ ., data=ind_game_stats)
summary(bowl_model)
colnames(ind_game_stats)
### RF
library(randomForest)
fit <- randomForest(home_win ~ ., ind_game_stats,ntree=500,na.action = na.exclude)
fit_fac <- randomForest(home_win ~ ., ind_game_stats_fac,ntree=500,na.action = na.exclude)
summary(fit)
summary(fit_fac)
#Predict Output
bowl_game_stats$home_win_pct <- as.vector(predict(fit,bowl_game_stats))
bowl_game_stats$home_win <- as.vector.factor(predict(fit_fac,bowl_game_stats))
bowl_game_stats$conf <- ifelse(bowl_game_stats$home_win == 1, bowl_game_stats$home_win_pct, 1-bowl_game_stats$home_win_pct)
### GBM
library(caret)
library(gbm)
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
gbm_fit_fac <- train(home_win ~ ., data = ind_game_stats_fac, method = "gbm", trControl = fitControl,verbose = FALSE,na.action = na.exclude)
predictions <- predict(gbm_fit_fac,bowl_game_stats,type= "prob")
gbm <- cbind(gbm,predictions)
gbm$gbm_home_win <- ifelse(gbm$`1`>gbm$`0`,1,0)
gbm$gbm_win_pct <- ifelse(gbm$gbm_home_win == 1,gbm$`1`,gbm$`0`)
bowl_game_stats <- cbind(bowl_game_stats,gbm$gbm_home_win,gbm$home_win_pct)
colnames(bowl_game_stats)[32:33] <- c("gbm_home_win","gbm_win_pct")
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,home_win_pct,gbm_home_win,gbm_win_pct)
#ind_game_stats$home_win <- as.factor(ind_game_stats$home_win)
#bowl_games$away_team <- NULL
#bowl_games$home_team <- NULL
setwd("/Users/meyappans/Desktop/CFB_Bowl/data")
# Non-Factor, Provides Win % Confidence
ind_game_stats <- readRDS(file="Ind_game_data.RDS")
ind_game_stats$away_team <- NULL
ind_game_stats$home_team <- NULL
## Drop scores, as they are too influential in determing who wins
## If you don't drop this, model picks whoever scores more over the course of the
## season. This isn't neccessarily who is going to win always.
ind_game_stats$away_team_score <- NULL
ind_game_stats$home_team_score <- NULL
# Factor, Provides Win (Yes or No)
ind_game_stats_fac <- ind_game_stats
ind_game_stats_fac$home_win <- as.factor(ind_game_stats_fac$home_win)
## Load bowl_game data
bowl_game_stats <- readRDS(file="bowl_games.RDS")
sapply(bowl_game_stats,class)
gbm <- bowl_game_stats
### Create SVM
library("e1071")
bowl_model <- svm(home_win ~ ., data=ind_game_stats)
summary(bowl_model)
colnames(ind_game_stats)
### RF
library(randomForest)
fit <- randomForest(home_win ~ ., ind_game_stats,ntree=500,na.action = na.exclude)
fit_fac <- randomForest(home_win ~ ., ind_game_stats_fac,ntree=500,na.action = na.exclude)
summary(fit)
summary(fit_fac)
#Predict Output
bowl_game_stats$home_win_pct <- as.vector(predict(fit,bowl_game_stats))
bowl_game_stats$home_win <- as.vector.factor(predict(fit_fac,bowl_game_stats))
bowl_game_stats$conf <- ifelse(bowl_game_stats$home_win == 1, bowl_game_stats$home_win_pct, 1-bowl_game_stats$home_win_pct)
### GBM
library(caret)
library(gbm)
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
gbm_fit_fac <- train(home_win ~ ., data = ind_game_stats_fac, method = "gbm", trControl = fitControl,verbose = FALSE,na.action = na.exclude)
predictions <- predict(gbm_fit_fac,bowl_game_stats,type= "prob")
gbm <- cbind(gbm,predictions)
gbm$gbm_home_win <- ifelse(gbm$`1`>gbm$`0`,1,0)
gbm$gbm_win_pct <- ifelse(gbm$gbm_home_win == 1,gbm$`1`,gbm$`0`)
bowl_game_stats <- cbind(bowl_game_stats,gbm$gbm_home_win,gbm$gbm_win_pct)
colnames(bowl_game_stats)[32:33] <- c("gbm_home_win","gbm_win_pct")
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,home_win_pct,gbm_home_win,gbm_win_pct)
#ind_game_stats$home_win <- as.factor(ind_game_stats$home_win)
#bowl_games$away_team <- NULL
#bowl_games$home_team <- NULL
View(bowl_game_stats)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,home_win_pct,gbm_home_win,gbm_win_pct)
library(dplyr)
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,home_win_pct,gbm_home_win,gbm_win_pct)
View(bowl_final_pred)
View(bowl_game_stats)
bowl_final_pred <- bowl_game_stats %>% select(away_team,home_team,home_win,conf,gbm_home_win,gbm_win_pct)
View(bowl_game_stats)
View(bowl_game_stats)
saveRDS(bowl_final_pred,file="bowl_predictions.RDS")
getwd()
